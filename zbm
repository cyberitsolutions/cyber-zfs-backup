#!/usr/bin/python

import cherrypy
from cherrypy import expose, tools, url

import sys
import os
import time
from datetime import datetime, timedelta
import timediff
import string
import re
import simplejson

import cgi
import html
import auth
import page

import chroot

# Simple database-access functionality.
import db

# ZBM config module.
import zbm_cfg as cfg

# The authentication module.
from auth import AuthController, require, member_of, name_is

# The restore handler.
import restore_spec

# Filesystem-browsing functionality.
import browse

local_dir = os.path.join(os.getcwd(), os.path.dirname(__file__))

# File size stuff.
file_size_class = [
    (1024, 'B'),
    (1024**2, 'KB'),
    (1024**3, 'MB'),
    (1024**4, 'GB'),
    (1024**5, 'TB')
]

def filesize_exp(size):
    s = file_size_class[0]
    if size < s[0]:
        return str(size)

    s = file_size_class[-1]
    if not size < s[0]:
        return "%0.1f%s" % ( float(size)/(s[0]/1024), s[1] )

    for s in file_size_class[1:]:
        if size < s[0]:
            return "%0.1f%s" % ( float(size)/(s[0]/1024), s[1] )

# Given size in bytes, return suitable HTML expression.
def filesize_html(size):
    return html.span(filesize_exp(size), att='value="%s"' % ( size ))

def split_path(pathname):
    if pathname == '/':
        return ['/']
    if pathname == '':
        return []
    (basepath, basename) = os.path.split(pathname)

    sp = split_path(basepath)
    if basename != '':
        sp.append(basename)
    return sp


def pathname_dirlink(share, pathname):
    """
    Takes a path string and return a string where each directory
    name is a link to that directory, eg.:

    "/etc/" => '<a href="/browse?path=/">&nbsp;/</a><a href="/browse?path=/etc">etc/</a>'

    The trailing / should be included in the link text.

    Note that there is no validation that it's a real path.
    """
    escaped_share = cgi.escape(share, quote=True)
    if pathname == '/':
        return html.a(escaped_share+"/", att='id="share_name" name="%s" class="dirlink" href="/browse?share=%s&amp;path=/"' % ( escaped_share, escaped_share ))

    (basepath, basename) = os.path.split(pathname)
    name_html = html.a(basename + "/", att='class="dirlink" href="/browse?share=%s&amp;path=%s"' % ( escaped_share, cgi.escape(pathname, quote=True) ))
    if basepath == '':
        return name_html
    return pathname_dirlink(share, basepath) + name_html

def get_extension(filename):
    filename_ext = ''
    m = re.search(r'^[^.].*\.([^.]+)$', filename)
    if m:
        filename_ext = string.lower(m.group(1))
    return filename_ext

def tr_filespec(rs, file_spec, revolver=None):
    f = file_spec

    tr_attr = ""
    if not revolver is None:
        tr_attr = "class='%s'" % ( revolver.state() )

    lmt = time.localtime(f.mtime)
    time_exp = time.strftime('%Y-%m-%d %H:%M:%S', lmt)

    filename_ext = get_extension(f.name)

    now = datetime.now()
    mtime_dt = datetime(*lmt[:6])
    age_exp = ''
    if mtime_dt < now:
        age_exp = str(timediff.show(now - mtime_dt))

    escaped_path = cgi.escape(f.path, quote=True)
    is_checked = ""
    if rs.is_included(f):
        is_checked = " checked"
    checkbox_attr = 'class="zbm_select" name="path:%s" type="checkbox"%s' % ( escaped_path, is_checked )
    return html.tr(
        html.td([
            html.input(att=checkbox_attr),
            f.type,
            filesize_html(f.size),
            f.display,
            filename_ext,
            time_exp,
            age_exp]), att=tr_attr)

def can_access_parent(path):
    return not ( path == '/' or path == '' )

class EmptyRevolverError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)

# Rotates through the values of a given array/tuple.
class Revolver:
    def __init__(self, collection):
        if len(collection) == 0:
            raise EmptyRevolverError("Empty collection supplied to Revolver.")
        self._collection = collection
        self._index = 0

    def state(self):
        rv = self._collection[self._index]
        incremented = self._index + 1
        if incremented < len(self._collection):
            self._index = incremented
        else:
            self._index = 0
        return rv

def dir_box(rs, share, chrooted_path):
    select_all_checkbox = html.input(att='id="select_all" name="select_all" type="checkbox" disabled')
    dir_header = html.thead(html.tr(html.th([select_all_checkbox, 'Type', 'Size', 'Name', 'Ext', 'Last Modified', 'Age'])))
    dir_contents = browse.get_dir_contents(chrooted_path, share)

    parent_dir_html = ""
    if not dir_contents[0] is None:
        parent_dir_html = html.p(dir_contents[0].display)

    revolver = Revolver(('row_odd', 'row_even'))

    dir_contents_html = html.tbody(string.join(map(lambda fs: tr_filespec(rs, fs, revolver), dir_contents[1:])))
    return html.div(parent_dir_html + html.table(dir_header + dir_contents_html, att='class="browsedir tablesorter"'), att='class="browsedir"')

def make_file_spec(company_name, share_name, path):
    """ Returns a FileSpec from a company_name, share_name, path. """
    sp = chroot.build_share_path(company_name, share_name)
    mychroot = chroot.Chroot(sp)
    return browse.FileSpec(mychroot.chrooted_path(path), share_name)


class ZfsBackupManager:
    auth = AuthController()

    def __init__(self):
        # If an exception is raised here, let it go.
        pass

    @expose
    @require()
    def index(self, share=None, path="/"):
        return self.browse(share=share, path=path)

    @expose
    @require()
    def show(self, restore_id=None):
        company_name = cherrypy.session.get(auth.COMPANY_NAME)

        rs = None
        if restore_id is None:
            rs = restore_spec.RestoreSpec()
            restore_id = rs.restore_id
        else:
            restore_id = int(restore_id)
            rs = restore_spec.RestoreSpec(restore_id)

        # Assemble simple list of the files in given restore.
        def spp_to_link(spp):
            """ Returns a HTML link for displaying a share-plus-path expression. """
            m = re.search('^([^:]+):(.*)$', spp)
            if not m:
                raise EmptyRevolverError("Invalid share-plus-path expression: %s" % ( spp ))
            share_name = m.group(1)
            file_spec = make_file_spec(company_name, share_name, m.group(2))

            # The file_path we want to use is the *parent* of the
            # file_spec above.
            parent_file_spec = file_spec.get_parent()
            if parent_file_spec is None:
                # This technically should not happen, as we don't
                # provide a way to select an entire share.
                parent_file_spec = file_spec

            parent_file_path = parent_file_spec.path

            escaped_share_name = cgi.escape(share_name, quote=True)
            escaped_file_path = cgi.escape(parent_file_path, quote=True)

            return html.a(html.b(escaped_share_name) + html.nbsp() + escaped_file_path,
                    att='class="dirlink" href="/browse?share=%s&amp;path=%s"' % ( escaped_share_name, escaped_file_path ))

        restore_path_links = [ spp_to_link(spp) for spp in rs.include_set ]

        # Okay, let's show some actual *details* about the current
        # restore.
        return page.page("ZBM - Current Restore",
            html.h1("Current Restore")
            + html.p("Current restore id is %d." % ( restore_id ))
            + html.p("Running total size is %s." % ( filesize_exp(rs.disk_usage_running_total) ) )
            + html.ul(html.li(restore_path_links))
            )

    @expose
    @require()
    def browse(self, share=None, path="/"):

        # Info from session.
        company_name = cherrypy.session.get(auth.COMPANY_NAME)

        # Okay, how to handle share....?
        if share is None:
            # We must return a list of available shares.
            available_shares = [ s[0] for s in db.get("select name from shares where company_name = %(company_name)s", vars()) ]
            links = [ html.a(s, att='href="/browse?share=%s"' % ( cgi.escape(s, quote=True) )) for s in available_shares ]

            return page.page("ZBM - Select Share",
                html.h1("Select Share")
                + html.ul(html.li(links)))

        rs = restore_spec.RestoreSpec()
        error_message = ""
        dir_box_html = ""
        try:
            # Now we use the company and share names to construct the chroot.
            sp = chroot.build_share_path(company_name, share)

            mychroot = chroot.Chroot(sp)
            chrooted_path = mychroot.chrooted_path(path)
            # Supply the share name as well as the chrooted path.
            dir_box_html = dir_box(rs, share, chrooted_path)
        except chroot.BadChrootPath, e:
            error_message = html.p(html.span(str(e), att='class="error_message"'))

        return page.page("ZBM - Browse Share",
            html.h1(pathname_dirlink(share, path))
            + error_message
            + dir_box_html)

    static = tools.staticdir.handler(section="/static",
            dir=os.path.join(local_dir, "static"))

    @expose
    @require()
    def json(self, **kwargs):
        # Whatever happens here, we return plaintext JSON.
        cherrypy.response.headers['Content-Type'] = "text/plain"

        company_name = cherrypy.session.get(auth.COMPANY_NAME)

        if 'action' in kwargs:
            action = kwargs['action']

            # We expect a call with share=?, path=? and action=remove/include.
            # share is the name of a share.
            # path is of the form "path:/2009-01-19T12:24:49Z/runaway.txt",
            # representing a path within a share.
            #
            # Obviously the user identity defines the company.
            if not ('path' in kwargs and 'share' in kwargs):
                return simplejson.dumps([False, None, "action, path and share all required."])

            path = re.sub('^path:', '', kwargs['path'])
            share_name = kwargs['share']

            # Make the file_spec we need.
            file_spec = make_file_spec(company_name, share_name, path)

            if not action in ('include', 'remove'):
                return simplejson.dumps([False, None, "Invalid action: %s" % ( action )])
            
            rs = restore_spec.RestoreSpec()
            message = ""
            if action == "include":
                if not rs.is_included(file_spec):
                    rs.include(file_spec)
                    message = "Included %s" % ( file_spec.name )
                # Doesn't matter if it's already included - we just
                # act in the same way if it'd just been successfully
                # included.
            elif action == "remove":
                if rs.is_included(file_spec):
                    rs.remove(file_spec)
                    message = "Removed %s" % ( file_spec.name )

            # The information returned in the second spot should
            # just be two numbers - the current number of selected
            # files/dirs and the running-total du_size.
            message += "<br/>Running total: %s" % ( filesize_exp(rs.disk_usage_running_total)  )
            return simplejson.dumps([True, [len(rs.include_set.keys()), rs.disk_usage_running_total], message]) 

        # Returns:
        # * a true/false for success/failure,
        # * a data structure of information iff success,
        # * a message string (error message iff failure).
        return simplejson.dumps([False, None, ""])

# Config.

zbm_config = {
    'global' : {
        'server.socket_host': '0.0.0.0',
        'server.socket_port': 8000,
        'server.thread_pool': 10,

        # To set data for the current session, use
        # cherrypy.session['fieldname'] = 'fieldvalue'.
        # To get data use cherrypy.session.get('fieldname').
        'tools.sessions.on' : True,
        'tools.sessions.storage_type' : 'file',
        'tools.sessions.storage_path' : os.path.join(os.path.abspath('.'), "sessions"),
        'tools.sessions.timeout' : 30, # 30 minutes

        'tools.auth.on' : True
    }
}

app_config = {
    'global' : {
        'tools.staticdir.root' : os.path.join(os.path.abspath('.'), "static")
    },

    # Define the web-app's favicon.
    '/favicon.ico' : {
        'tools.staticfile.on' : True,
        'tools.staticfile.filename' : os.path.join(os.path.abspath('.'), "static/zbm.ico")
    }
}

######################################################################
## 3.0-specific syntax.

# Check the session storage path exists.
storage_path = zbm_config['global']['tools.sessions.storage_path']
if not os.path.isdir(storage_path):
    print "Session storage path %s does not exist!\nBailing out." % ( storage_path )
    sys.exit(1)

# Tell CherryPy to call the db module's "connect" for each thread,
# when it starts up.
cherrypy.engine.subscribe('start_thread', db.connect)

cherrypy.config.update(zbm_config)
cherrypy.quickstart(ZfsBackupManager(), config=app_config)

######################################################################
## 3.1-specific syntax.
#cherrypy.config.update(zbm_config)
#cherrypy.tree.mount(ZfsBackupManager(), '/', app_config)
#cherrypy.engine.start()
#cherrypy.engine.block()

